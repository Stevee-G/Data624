geom_histogram(bins = 50) +
facet_wrap(~ key, scales = "free")
testing %>%
select(where(is.numeric)) %>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_boxplot() +
facet_wrap(~key, scales = "free")
testing_cor <- cor(testing %>%
select(where(is.numeric)),
use = "complete.obs")
corrplot(testing_cor)
training %>%
select(c(2:33)) %>%
summarize_all(funs(sum(is.na(.)))) %>%
pivot_longer(everything(),
names_to = 'Predictor',
values_to = 'Number of Missing Values')
training <- kNN(training, k = 5) %>%
select(c(1:33))
training %>%
select(c(2:33)) %>%
summarize_all(funs(sum(is.na(.)))) %>%
pivot_longer(everything(),
names_to = 'Predictor',
values_to = 'Number of Missing Values')
nearZeroVar(training %>%
select(c(2:33)), name = TRUE)
training <- training %>%
select(-Hyd.Pressure1)
findCorrelation(testing_cor, cutoff = 0.9, names = TRUE)
training <- training %>%
select(-c(Balling, Hyd.Pressure3, Alch.Rel, Density, Filler.Level))
X <- training[ , !names(training) %in% c("PH")]
y <- training$PH
set.seed(123)
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
X_test <- X[-trainIndex, ]
y_train <- y[trainIndex]
y_test <- y[-trainIndex]
ctrl <- trainControl(
method = "cv",
number = 10,
repeats = 3,
search = "grid",
verboseIter = FALSE,
savePredictions = "final"
)
ctrl_simple <- trainControl(
method = "cv",
number = 5,
search = "grid",
verboseIter = FALSE,
savePredictions = "final"
)
rf_grid <- expand.grid(
mtry = c(2, 4, 6, 8, 10, 12)
)
rf_model <- train(
x = X_train,
y = y_train,
method = "rf",
trControl = ctrl,
tuneGrid = rf_grid,
ntree = 500,
importance = TRUE,
metric = "RMSE"
)
print(rf_model)
plot(rf_model, main = "Random Forest Hyperparameter Tuning")
rf_pred <- predict(rf_model, X_test)
testing <- testing %>%
select(-c(PH, Balling, Hyd.Pressure1, Hyd.Pressure3, Alch.Rel, Density, Filler.Level)) %>%
mutate(PH = "")
pred <- predict(rf_model, testing)
pred <- predict(rf_model, testing)
library(caret)
library(corrplot)
library(DMwR2)
library(e1071)
library(gbm)
library(ggplot2)
library(kernlab)
library(knitr)
library(nnet)
library(openxlsx)
library(randomForest)
library(readxl)
library(tidyverse)
library(VIM)
set.seed(123)
training <- read.csv("https://raw.githubusercontent.com/Stevee-G/Data624/refs/heads/main/Project2/TrainingData.csv")
testing <- read.csv("https://raw.githubusercontent.com/Stevee-G/Data624/refs/heads/main/Project2/TestData.csv")
str(training)
str(testing)
training %>%
ggplot() +
aes(x = PH) +
geom_histogram(bins= 50) +
facet_wrap(~ Brand.Code, scales = "free")
training %>%
ggplot() +
aes(x = PH) +
geom_boxplot() +
facet_wrap(~ Brand.Code, scales = "free")
training %>%
select(where(is.numeric))%>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_histogram(bins = 50) +
facet_wrap(~ key, scales = "free")
training %>%
select(where(is.numeric))%>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_boxplot() +
facet_wrap(~key, scales = "free")
training_cor <- cor(training %>%
select(where(is.numeric)),
use = "complete.obs")
corrplot(training_cor)
testing %>%
select(where(is.numeric)) %>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_histogram(bins = 50) +
facet_wrap(~ key, scales = "free")
testing %>%
select(where(is.numeric)) %>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_boxplot() +
facet_wrap(~key, scales = "free")
testing_cor <- cor(testing %>%
select(where(is.numeric)),
use = "complete.obs")
corrplot(testing_cor)
training %>%
select(c(2:33)) %>%
summarize_all(funs(sum(is.na(.)))) %>%
pivot_longer(everything(),
names_to = 'Predictor',
values_to = 'Number of Missing Values')
training <- kNN(training, k = 5) %>%
select(c(1:33))
training %>%
select(c(2:33)) %>%
summarize_all(funs(sum(is.na(.)))) %>%
pivot_longer(everything(),
names_to = 'Predictor',
values_to = 'Number of Missing Values')
nearZeroVar(training %>%
select(c(2:33)), name = TRUE)
training <- training %>%
select(-Hyd.Pressure1)
findCorrelation(testing_cor, cutoff = 0.9, names = TRUE)
training <- training %>%
select(-c(Balling, Hyd.Pressure3, Alch.Rel, Density, Filler.Level))
X <- training[ , !names(training) %in% c("PH")]
y <- training$PH
set.seed(123)
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
X_test <- X[-trainIndex, ]
y_train <- y[trainIndex]
y_test <- y[-trainIndex]
ctrl <- trainControl(
method = "cv",
number = 10,
repeats = 3,
search = "grid",
verboseIter = FALSE,
savePredictions = "final"
)
ctrl_simple <- trainControl(
method = "cv",
number = 5,
search = "grid",
verboseIter = FALSE,
savePredictions = "final"
)
rf_grid <- expand.grid(
mtry = c(2, 4, 6, 8, 10, 12)
)
rf_model <- train(
x = X_train,
y = y_train,
method = "rf",
trControl = ctrl,
tuneGrid = rf_grid,
ntree = 500,
importance = TRUE,
preProcess = pre_process,
metric = "RMSE"
)
print(rf_model)
plot(rf_model, main = "Random Forest Hyperparameter Tuning")
rf_pred <- predict(rf_model, X_test)
rf_grid <- expand.grid(
mtry = c(2, 4, 6, 8, 10, 12)
)
rf_model <- train(
x = X_train,
y = y_train,
method = "rf",
trControl = ctrl,
tuneGrid = rf_grid,
ntree = 500,
importance = TRUE,
metric = "RMSE"
)
print(rf_model)
plot(rf_model, main = "Random Forest Hyperparameter Tuning")
rf_pred <- predict(rf_model, X_test)
testing <- testing %>%
select(-c(PH, Balling, Hyd.Pressure1, Hyd.Pressure3, Alch.Rel, Density, Filler.Level)) %>%
mutate(PH = "")
pred <- predict(rf_model, testing)
library(caret)
library(corrplot)
library(DMwR2)
library(e1071)
library(gbm)
library(ggplot2)
library(kernlab)
library(knitr)
library(nnet)
library(openxlsx)
library(randomForest)
library(readxl)
library(tidyverse)
library(VIM)
set.seed(123)
training <- read.csv("https://raw.githubusercontent.com/Stevee-G/Data624/refs/heads/main/Project2/TrainingData.csv")
testing <- read.csv("https://raw.githubusercontent.com/Stevee-G/Data624/refs/heads/main/Project2/TestData.csv")
str(training)
str(testing)
training %>%
ggplot() +
aes(x = PH) +
geom_histogram(bins= 50) +
facet_wrap(~ Brand.Code, scales = "free") +
labs(title = "pH Distribution by Brand Code")
training %>%
ggplot() +
aes(x = PH) +
geom_boxplot() +
facet_wrap(~ Brand.Code, scales = "free") +
labs(title = "pH Distribution Summary by Brand Code")
training %>%
select(where(is.numeric))%>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_histogram(bins = 50) +
facet_wrap(~ key, scales = "free") +
labs(title = "Distribution of Predictors for Training Data")
training %>%
select(where(is.numeric))%>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_boxplot() +
facet_wrap(~key, scales = "free") +
labs(title = "Distribution Summary of Predictors for Training Data")
training_cor <- cor(training %>%
select(where(is.numeric)),
use = "complete.obs")
corrplot(training_cor)
testing %>%
select(where(is.numeric)) %>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_histogram(bins = 50) +
facet_wrap(~ key, scales = "free") +
labs(title = "Distribution of Predictors for Tresting Data")
testing %>%
select(where(is.numeric)) %>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_boxplot() +
facet_wrap(~key, scales = "free") +
labs(title = "Distribution Summary of Predictors for Testing Data")
testing_cor <- cor(testing %>%
select(where(is.numeric)),
use = "complete.obs")
corrplot(testing_cor)
training %>%
select(c(2:33)) %>%
summarize_all(funs(sum(is.na(.)))) %>%
pivot_longer(everything(),
names_to = 'Predictor',
values_to = 'Number of Missing Values')
training <- kNN(training, k = 5) %>%
select(c(1:33))
training %>%
select(c(2:33)) %>%
summarize_all(funs(sum(is.na(.)))) %>%
pivot_longer(everything(),
names_to = 'Predictor',
values_to = 'Number of Missing Values')
nearZeroVar(training %>%
select(c(2:33)), name = TRUE)
training <- training %>%
select(-Hyd.Pressure1)
findCorrelation(testing_cor, cutoff = 0.9, names = TRUE)
training <- training %>%
select(-c(Balling, Hyd.Pressure3, Alch.Rel, Density, Filler.Level))
X <- training[ , !names(training) %in% c("PH")]
y <- training$PH
set.seed(123)
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
X_test <- X[-trainIndex, ]
y_train <- y[trainIndex]
y_test <- y[-trainIndex]
ctrl <- trainControl(
method = "cv",
number = 10,
repeats = 3,
search = "grid",
verboseIter = FALSE,
savePredictions = "final"
)
ctrl_simple <- trainControl(
method = "cv",
number = 5,
search = "grid",
verboseIter = FALSE,
savePredictions = "final"
)
linear_model <- train(
x = X_train,
y = y_train,
method = "lm",
trControl = ctrl,
preProcess = c("center", "scale"),
metric = "RMSE"
)
print(linear_model)
linear_pred <- predict(linear_model, X_test)
testing <- testing %>%
select(-c(PH, Balling, Hyd.Pressure1, Hyd.Pressure3, Alch.Rel, Density, Filler.Level)) %>%
mutate(PH = "")
library(caret)
library(corrplot)
library(DMwR2)
library(e1071)
library(gbm)
library(ggplot2)
library(kernlab)
library(knitr)
library(nnet)
library(openxlsx)
library(randomForest)
library(readxl)
library(tidyverse)
library(VIM)
set.seed(123)
training <- read.csv("https://raw.githubusercontent.com/Stevee-G/Data624/refs/heads/main/Project2/TrainingData.csv")
testing <- read.csv("https://raw.githubusercontent.com/Stevee-G/Data624/refs/heads/main/Project2/TestData.csv")
str(training)
str(testing)
training %>%
ggplot() +
aes(x = PH) +
geom_histogram(bins= 50) +
facet_wrap(~ Brand.Code, scales = "free") +
labs(title = "pH Distribution by Brand Code")
training %>%
ggplot() +
aes(x = PH) +
geom_boxplot() +
facet_wrap(~ Brand.Code, scales = "free") +
labs(title = "pH Distribution Summary by Brand Code")
training %>%
select(where(is.numeric))%>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_histogram(bins = 50) +
facet_wrap(~ key, scales = "free") +
labs(title = "Distribution of Predictors for Training Data")
training %>%
select(where(is.numeric))%>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_boxplot() +
facet_wrap(~key, scales = "free") +
labs(title = "Distribution Summary of Predictors for Training Data")
training_cor <- cor(training %>%
select(where(is.numeric)),
use = "complete.obs")
corrplot(training_cor)
testing %>%
select(where(is.numeric)) %>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_histogram(bins = 50) +
facet_wrap(~ key, scales = "free") +
labs(title = "Distribution of Predictors for Tresting Data")
testing %>%
select(where(is.numeric)) %>%
gather() %>%
filter(!is.na(value)) %>%
ggplot(aes(value)) +
geom_boxplot() +
facet_wrap(~key, scales = "free") +
labs(title = "Distribution Summary of Predictors for Testing Data")
testing_cor <- cor(testing %>%
select(where(is.numeric)),
use = "complete.obs")
corrplot(testing_cor)
training %>%
select(c(2:33)) %>%
summarize_all(funs(sum(is.na(.)))) %>%
pivot_longer(everything(),
names_to = 'Predictor',
values_to = 'Number of Missing Values')
training <- kNN(training, k = 5) %>%
select(c(1:33))
training %>%
select(c(2:33)) %>%
summarize_all(funs(sum(is.na(.)))) %>%
pivot_longer(everything(),
names_to = 'Predictor',
values_to = 'Number of Missing Values')
nearZeroVar(training %>%
select(c(2:33)), name = TRUE)
training <- training %>%
select(-Hyd.Pressure1)
findCorrelation(testing_cor, cutoff = 0.9, names = TRUE)
training <- training %>%
select(-c(Balling, Hyd.Pressure3, Alch.Rel, Density, Filler.Level))
X <- training[ , !names(training) %in% c("PH")]
y <- training$PH
set.seed(123)
trainIndex <- createDataPartition(y, p = 0.8, list = FALSE)
X_train <- X[trainIndex, ]
X_test <- X[-trainIndex, ]
y_train <- y[trainIndex]
y_test <- y[-trainIndex]
ctrl <- trainControl(
method = "cv",
number = 10,
repeats = 3,
search = "grid",
verboseIter = FALSE,
savePredictions = "final"
)
ctrl_simple <- trainControl(
method = "cv",
number = 5,
search = "grid",
verboseIter = FALSE,
savePredictions = "final"
)
linear_model <- train(
x = X_train,
y = y_train,
method = "lm",
trControl = ctrl,
preProcess = c("center", "scale"),
metric = "RMSE"
)
print(linear_model)
linear_pred <- predict(linear_model, X_test)
testing <- testing %>%
select(-c(PH, Balling, Hyd.Pressure1, Hyd.Pressure3, Alch.Rel, Density, Filler.Level)) %>%
mutate(PH = "")
pred <- predict(linear_model, testing)
testing$PH <- pred
excel <- createWorkbook()
addWorksheet(excel, "PH Prediction")
writeData(excel, sheet = "PH Prediction", testing)
saveWorkbook(excel, "TestData.xlsx", overwrite = TRUE)
pred <- predict(dt_model, testing)
testing$PH <- pred
excel <- createWorkbook()
addWorksheet(excel, "PH Prediction")
writeData(excel, sheet = "PH Prediction", testing)
saveWorkbook(excel, "TestData.xlsx", overwrite = TRUE)
linear_model <- train(
x = X_train,
y = y_train,
method = "lm",
trControl = ctrl,
preProcess = c("center", "scale"),
metric = "RMSE"
)
print(linear_model)
plot(linear_model, main = "Linear Regression Hyperparameter Tuning")
linear_model <- train(
x = X_train,
y = y_train,
method = "lm",
trControl = ctrl,
preProcess = c("center", "scale"),
metric = "RMSE"
)
print(linear_model)
linear_pred <- predict(linear_model, X_test)
