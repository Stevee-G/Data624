autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = "5 years") %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = "5 years") %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = as.numeric(row_number())) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = "5 years") %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = "5 years") %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
library(fpp3)
library(seasonal)
library(USgas)
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Naive = NAIVE(Open)) %>%
forecast(h = "5 years") %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Close ~ drift())) %>%
forecast(h = "5 years") %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock, Close) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Close ~ drift())) %>%
forecast(h = "5 years") %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock, Close) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Close ~ drift())) %>%
forecast(h = 5) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock, Close) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Close ~ drift())) %>%
forecast(h = 100) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 100) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 250) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 250) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
autoplot(fb_stock, Open) +
geom_segment(aes(x = min(day), y = Open[which.min(day)],
xend = max(day), yend = Open[which.max(day)]),
color = "blue", linetype = "dashed") +
theme_minimal() +
labs(title = "Line Through First and Last Points",
x = "X-axis",
y = "Y-axis")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 250) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
autoplot(fb_stock, Open) +
geom_segment(aes(x = min(day), y = Open[which.min(day)],
xend = max(day), yend = Open[which.max(day)]),
color = "red", linetype = "dashed") +
theme_minimal()
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 250) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
autoplot(fb_stock, Open) +
geom_segment(aes(x = min(day), y = Open[which.min(day)],
xend = max(day), yend = Open[which.max(day)]),
color = "red", linetype = "dashed")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 250) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 250) %>%
autoplot(fb_stock, level = NULL) +
geom_segment(aes(x = min(day), y = Open[which.min(day)],
xend = max(day), yend = Open[which.max(day)]),
color = "red", linetype = "dashed")
fb_stock <- gafa_stock %>%
filter(Symbol == "FB") %>%
mutate(day = row_number()) %>%
update_tsibble(index = day, regular = TRUE)
autoplot(fb_stock) +
labs(title = "Facebook Stock")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 250) %>%
autoplot(fb_stock) +
labs(title = "Facebook Stock Drift Forecast")
fb_stock %>%
model(Drift = RW(Open ~ drift())) %>%
forecast(h = 250) %>%
autoplot(fb_stock, level = NULL) +
geom_segment(aes(x = min(day), y = Open[which.min(day)],
xend = max(day), yend = Open[which.max(day)]),
color = "red", linetype = "dashed") +
labs(title = "Facebook Stock Extrapolated Line Segment")
fb_stock %>%
model(Mean = MEAN(Open),
Naive = NAIVE(Open),
Snaive = SNAIVE(Open)) %>%
forecast(h = 250) %>%
autoplot(fb_stock, level = NULL) +
labs(title = "Facebook Stock Mean, Naive and Seasonal Naive Forecasts")
fb_stock %>%
model(Mean = MEAN(Open),
Snaive = SNAIVE(Open)) %>%
forecast(h = 250) %>%
autoplot(fb_stock, level = NULL) +
labs(title = "Facebook Stock Mean, Naive and Seasonal Naive Forecasts")
fb_stock %>%
model(Mean = MEAN(Open),
Naive = NAIVE(Open),
Snaive = SNAIVE(Open)) %>%
forecast(h = 250) %>%
autoplot(fb_stock, level = NULL) +
labs(title = "Facebook Stock Mean, Naive and Seasonal Naive Forecasts")
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look a some forecasts
fit |> forecast() |> autoplot(recent_production)
?global_economy
aus_exports <- global_economy %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(SNAIVE(Exports))
afit %>%
gg_tsresiduals()
aus_exports <- global_economy %>%
filter(Country == "Australia") %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(SNAIVE(Exports))
afit %>%
gg_tsresiduals()
aus_exports <- global_economy %>%
filter(!is.na(Exports)) %>%
filter(Country == "Australia") %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(SNAIVE(Exports))
afit %>%
gg_tsresiduals()
aus_exports <- global_economy %>%
filter(!is.na(Exports)) %>%
filter(Country == "Australia") %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(SNAIVE(Exports)) %>%
autoplot(aus_exports)
aus_exports <- global_economy %>%
filter(!is.na(Exports)) %>%
filter(Country == "Australia") %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(SNAIVE(Exports))
afit %>%
gg_tsresiduals()
View(afit)
View(fit)
aus_exports <- global_economy %>%
filter(!is.na(Exports)) %>%
filter(Country == "Australia") %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(SNAIVE(Exports))
afit %>%
gg_tsresiduals()
aus_exports <- global_economy %>%
filter(!is.na(Exports)) %>%
filter(Country == "Australia") %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(NAIVE(Exports))
afit %>%
gg_tsresiduals()
afit %>%
forecast() %>%
autoplot(aus_exports)
bricks <- aus_production %>%
filter(!is.na(Bricks)) %>%
select(Bricks)
autoplot(bricks)
bfit <- bricks %>%
model(NAIVE(Bricks))
bfit %>%
gg_tsresiduals()
bfit %>%
forecast() %>%
autoplot(bricks)
bricks <- aus_production %>%
filter(!is.na(Bricks)) %>%
select(Bricks)
autoplot(bricks)
bfit <- bricks %>%
model(SNAIVE(Bricks))
bfit %>%
gg_tsresiduals()
bfit %>%
forecast() %>%
autoplot(bricks)
set.seed(1)
myseries <- aus_retail %>%
filter(`Series ID` == sample(aus_retail$`Series ID`,1))
View(myseries)
myseries_train <- myseries %>%
filter(year(Month) < 2011)
View(myseries_train)
autoplot(myseries, Turnover) +
autolayer(myseries_train, Turnover, colour = "red")
fit <- myseries_train %>%
model(SNAIVE())
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look a some forecasts
fit |> forecast() |> autoplot(recent_production)
mfit <- myseries_train %>%
model(SNAIVE())
mfit <- myseries_train %>%
model(SNAIVE(Turnover))
mfit %>%
gg_tsresiduals()
fc <- mfit %>%
forecast(new_data = anti_join(myseries, myseries_train))
fc %>%
autoplot(myseries)
mfit %>%
accuracy()
fc %>%
accuracy(myseries)
library(fpp3)
library(seasonal)
library(USgas)
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look a some forecasts
fit |> forecast() |> autoplot(recent_production)
augment(fit) |> features(.innov, ljung_box, lag=8)
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look a some forecasts
fit |> forecast() |> autoplot(recent_production)
augment(fit) |> features(.resid, ljung_box, lag=8)
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look at some forecasts
fit |> forecast() |> autoplot(recent_production)
augment(fit) |> features(.resid, ljung_box, lag=10)
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look at some forecasts
fit |> forecast() |> autoplot(recent_production)
# Check for significance
augment(fit) %>%
features(.resid, ljung_box, lag=8)
# Extract data of interest
recent_production <- aus_production |>
filter(year(Quarter) >= 1992)
# Define and estimate a model
fit <- recent_production |> model(SNAIVE(Beer))
# Look at the residuals
fit |> gg_tsresiduals()
# Look at some forecasts
fit |> forecast() |> autoplot(recent_production)
# Check for significance
augment(fit) %>%
features(.resid, ljung_box, lag=8)
aus_exports <- global_economy %>%
filter(!is.na(Exports)) %>%
filter(Country == "Australia") %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(NAIVE(Exports))
afit %>%
gg_tsresiduals()
afit %>%
forecast() %>%
autoplot(aus_exports)
bricks <- aus_production %>%
filter(!is.na(Bricks)) %>%
select(Bricks)
autoplot(bricks)
bfit <- bricks %>%
model(SNAIVE(Bricks))
bfit %>%
gg_tsresiduals()
bfit %>%
forecast() %>%
autoplot(bricks)
bricks <- aus_production %>%
filter(!is.na(Bricks)) %>%
select(Bricks)
autoplot(bricks)
bfit <- bricks %>%
model(NAIVE(Bricks))
bfit %>%
gg_tsresiduals()
bfit %>%
forecast() %>%
autoplot(bricks)
bricks <- aus_production %>%
filter(!is.na(Bricks)) %>%
select(Bricks)
autoplot(bricks)
bfit <- bricks %>%
model(SNAIVE(Bricks))
bfit %>%
gg_tsresiduals()
bfit %>%
forecast() %>%
autoplot(bricks)
aus_exports <- global_economy %>%
filter(!is.na(Exports)) %>%
filter(Country == "Australia") %>%
select(Exports)
autoplot(aus_exports)
afit <- aus_exports %>%
model(NAIVE(Exports))
afit %>%
gg_tsresiduals()
afit %>%
forecast() %>%
autoplot(aus_exports)
augment(afit) %>%
features(.resid, ljung_box, lag=10)
View(aus_exports)
bricks <- aus_production %>%
filter(!is.na(Bricks)) %>%
select(Bricks)
autoplot(bricks)
bfit <- bricks %>%
model(SNAIVE(Bricks))
bfit %>%
gg_tsresiduals()
bfit %>%
forecast() %>%
autoplot(bricks)
augment(bfit) %>%
features(.resid, ljung_box, lag=8)
set.seed(1)
myseries <- aus_retail %>%
filter(`Series ID` == sample(aus_retail$`Series ID`,1))
myseries_train <- myseries %>%
filter(year(Month) < 2011)
autoplot(myseries, Turnover) +
autolayer(myseries_train, Turnover, colour = "red")
mfit <- myseries_train %>%
model(SNAIVE(Turnover))
mfit %>%
gg_tsresiduals()
fc <- mfit %>%
forecast(new_data = anti_join(myseries, myseries_train))
fc %>%
autoplot(myseries)
mfit %>%
accuracy()
fc %>%
accuracy(myseries)
